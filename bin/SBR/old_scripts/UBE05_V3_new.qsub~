#!/bin/bash
#$ -S /bin/bash
#$ -V
#$ -cwd
## Queue settings (can be set at runtime in the qsub submition line)
#$ -q short.q
## [Optional] to ask between 1 and 4 processors
#$ -pe thread 4
## [Recommended] Ask for at least 1GB of memory for the job
#$ -l mem_free=12G
## [Recommended] Kill the job if it eats 4GB per slot (i.e. thread) 
## here it means between 8GB*1 thread=8GB and 8GB*6 threads=48GB
#$ -l h_vmem=32G

# Print information about the current job
# ---------------------------------------
# Print beginning of job
echo "$(date) job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME" 1>&2
# Print the number of threads used
echo "NSLOTS = $NSLOTS" 1>&2

##### combine UBE05_D002 .fa and .gff files in UGENE to visualise, use UBE05_C006 to see viral gene counts per contig
##### use the UBE05_B005_key as reference for ncvog=xxxx to functional protein names

##### NCVOG defintion files
NCVOGFUN="/projet/fr2424/sib/dmckeown/phaeoex_screen/finalresult/NCVOG_functional_categories"
NCVOGDEF="/projet/fr2424/sib/dmckeown/phaeoex_screen/finalresult/NCVOG_NCVOGdef"

##### NCBI taxonomy files
taxids="/projet/fr2424/sib/dmckeown/db/NCBI_taxdump/rankedlineage.dmp"

##### prepare NCVOG keys

#awk -F '\t' 'BEGIN{OFS= "\t"} ; {if($0 ~ /NCVOG/ && $10 != "") print $1,$7,"ncvog_prot_name="$10}' $NCVOGDEF | sort -Vu -k 1,1 | sort -V -k 2,2 | sed 's/NCVOG/ncvog=/g' > UBE05_K001; ## prep gi,NCVOG code, funct name key for figs etc
#cut -f 2 UBE05_K001 | sed 's/ncvog=/NCVOG/g' | awk 'FNR==NR { array[$1]=$2; next } { for (i in array) gsub("\\<"i"\\>", array[i]) }1'  $NCVOGFUN - | sed 's/^/ncvfg=/g' | sed 's/NCVOG[0-9]*/NA/g' | paste UBE05_K001 - | sed 's/#REF!/uncharacterized_protein/g' | sed -E 's/!|#|>|<|=|;|:|\[|\]|\|| |\/|\(|\)|,/_/g' | sed -E 's/___/_/g' | sed 's/__/_/g' | sed -E 's/\tncvog_([0-9]+)/\tncvog=\1/g' | sed -E 's/\tncvfg_/\tncvfg=/g' | sed -E 's/\tncvog_prot_name_/\tncvog_prot_name=/g' > UBE05_K002; ## $1 gi, $2 ncvog code, $3 protein name, $4 functional group

##### prepare ncvog labels to genes

#awk -F "\t" '!a[$1]++' UBE04_A001_ncvog*blast | sed -E 's/!|#|>|<|=|;|:|\[|\]|\|| |\/|\(|\)|,/_/g' | sed -E 's/___/_/g' | sed 's/__/_/g' > UBE05_A001; ## get best hit per gene vs NCVOG db + fix problematic characters in blast hit names
#cut -f 1,2 UBE05_A001 | sed -E 's/(\tgi_[0-9]+).*/\1/g' | sed 's/$/_/g' > UBE05_A002;
#awk '{print "gi_"$1"_\t"$2";"$3";"$4}' UBE05_K002 | awk 'FNR==NR { array[$1]=$2; next } { for (i in array) gsub("\\<"i"\\>", array[i]) }1' - UBE05_A002 | sed 's/^/UBE05_ID=/g' | sed 's/\t/_\t/1' | sed -E '/gi_[0-9]+_/d' > UBE05_A003; ## make gi - ncvog info key
#awk -F "\t|;" '{if($3 =="mRNA") print "UBE05_"$9"_" ; else print "NA;NA;NA"}' UBE03_D001 > UBE05_A005; split -l 100000 UBE05_A005 UBE05_B001_; ## get all gene names and split into smaller parts for array

##### add ncvog labels - may be slow perhaps 10 minutes per ~100,000 lines - run this script on each UBE05_B001 file at once in short.q

#awk 'FNR==NR { array[$1]=$2; next } { for (i in array) gsub(i, array[i]) }1'  UBE05_A003 $1 | sed -E 's/UBE05.*/ncvog=NA;ncvog_prot_name=NA;ncvfg=NA/g' > UBE05_B002_"$1"; ## copy gene name field of D001 and replace with NCVOG

##### merge ncvog labels withg rest of data

#for file in UBE05_B002_UBE05_B001_*; do mv "$file" "${file//UBE05_B002_UBE05_B001_/UBE05_B002_}"; done;
#cat UBE05_B002_* | paste -d ";" UBE03_D001 - > UBE05_B003; ## merge the output of previous step
#cat UBE05_B002_* | paste -d ";" UBE03_D002 - > UBE05_B004; ## merge the output of previous step
#sort -V -k 1,1 -k 4,4 -k 5,5 UBE05_B003 | cut -f 1 | sed -E 's/^(.*)_.ontig[0-9]*/\1/g' | sed 's/_sdr_f//g' | paste - UBE05_B003 | awk -F "\t" '{print > "UBE05_B005_"$1}'; for file in  UBE05_B005_*; do cut --complement -f 1 $file > "$file".gff; done; ## split by genome, one blast annotation with virus priority
#sort -V -k 1,1 -k 4,4 -k 5,5 UBE05_B004 | cut -f 1 | sed -E 's/^(.*)_.ontig[0-9]*/\1/g' | sed 's/_sdr_f//g' | paste - UBE05_B004 | awk -F "\t" '{print > "UBE05_B006_"$1}'; for file in  UBE05_B006_*; do cut --complement -f 1 $file > "$file".gff; done; ## split by genome, both cellular virus best hit and relative reciprocal blast scores per gene


##### summarise virus gene counts 
##### BY CLUSTER:
#sort -V -k 1,1 -k 4,4 -k 5,5 UBE05_B003 | awk -F "\t" '$3 =="mRNA"' | awk -F "\t|;" 'BEGIN{OFS="\t"}; ($15 ~/\<exons=1\>|\<exons=2\>/) && (p ~/\<exons=1\>|\<exons=2\>/) && f == $1 && $4 - i < 20000 {print q; print $0} {p=$15} {q=$0} {f=$1} {i=$5}' | sort -V -k 1,1 -k 4,4 -k 5,5 | uniq >  UBE05_C002;
#sort -V -k 1,1 -k 4,4 -k 5,5 UBE05_B003 | awk -F "\t" '$3 =="mRNA"' | cat - UBE05_C002 | sort -V -k 1,1 -k 4,4 -k 5,5 | uniq -u | sed -E 's/(.*)/N_N_N\t\1/g' > UBE05_C003;
#sed -E 's/(.*)/Y_Y_Y\t\1/g' UBE05_C002 | cat - UBE05_C003 | sort -V -k 2,2 -k 5,5 -k 6,6 | sed -E 's/(N_N_N).*/\1/g' | uniq | csplit --prefix=UBE05_C004_ - '/^N_N_N$/' '{*}';
#mkdir clusters_UBE05_C004;
#for file in UBE05_C004_*; do sed -i '/N_N_N/d' $file; sed -i 's/Y_Y_Y\t//g' $file; done;
#mv UBE05_C004_* ./clusters_UBE05_C004 ## move temp files to subdirectory
#find clusters_UBE05_C004/ -size  0 -print -delete ## delete any empty cluster files

#for file in clusters_UBE05_C004/UBE05_C004_*; do
	#wc -l $file | sed -E 's/([0-9]*) clusters_UBE05_C004\/UBE05_C004_([0-9]*)/\2\t\1/g' >> UBE05_C004.1; ## cluser ID no. and no. genes in cluster
	#head -1 $file | cut -f 1,4 >> UBE05_C004.2; ## contig and start of cluster
	#tail -1 $file | cut -f 5 >> UBE05_C004.3; ## end of cluster
	#awk '/VC_category=VR_Cr|VC_category=Vr_Cu|VC_category=Vr_Co|VC_category=Vu_Co/' $file | wc -l >> UBE05_C004.4; ## no. viral genes
	#awk '/VC_category=Vr_CR|VC_category=Vu_Cr|VC_category=Vo_Cr|VC_category=Vo_Cu/' $file | wc -l >> UBE05_C004.5; ## no. cellular genes
	#awk '/VC_category=Vr_Cr|VC_category=Vu_Cu/' $file | wc -l >> UBE05_C004.6; ## no. viral/cellular genes
	#awk '/VC_category=Vo_Co/' $file | wc -l  >> UBE05_C004.7; ## no. ORFan genes
	#awk '/ncvog=[0-9]/' $file | wc -l >> UBE05_C004.8; ## no. genes with NCLDV orthogroup
	#awk '/ncvog=[0-9]/' $file | awk '$0 !~ "ncvfg=NA"' | wc -l >> UBE05_C004.9; ## NCLDV orthogroup genes with a conserved function
#done;

#echo "contig:UBE_cluster_start-end;all_genes;viral_genes;cellular_genes;viral_or_cellular_genes;ORFan_genes;NCV_orthogroup_genes;NCV_orthogroup_function_genes" | sed 's/;/\t/g' > UBE05_C005_header;
#paste UBE05_C004.1 UBE05_C004.2 UBE05_C004.3 UBE05_C004.4 UBE05_C004.5 UBE05_C004.6 UBE05_C004.7 UBE05_C004.8 UBE05_C004.9 | sort -V -k 3,3 | awk 'BEGIN{OFS="\t"}; {print $3":cluster"$4"-"$5,$2,$6,$7,$8,$9,$10,$11}' | cat UBE05_C005_header - > UBE05_C005_cluster_counts;
#paste UBE05_C004.1 UBE05_C004.2 UBE05_C004.3 UBE05_C004.4 UBE05_C004.5 UBE05_C004.6 UBE05_C004.7 UBE05_C004.8 UBE05_C004.9 | sort -Vr -k 3,3 -k 6,6 -k 10,11 | awk -F "\t" '!a[$3]++' | sort -V -k 3,3 | awk 'BEGIN{OFS="\t"}; {print $3":cluster"$4"-"$5,$2,$6,$7,$8,$9,$10,$11}' | cat UBE05_C005_header - > UBE05_C005_best_cluster_counts;

##### BY CONTIG:

#cut -f 1 UBE05_B003 | sort -Vu > UBE05_D001; ## list all contigs
#sort -V -k 1,1 -k 4,4 -k 5,5 UBE05_B003 | awk -F "\t" '$3 =="mRNA"' | sed 's/;/\t/g' | cut -f 1,31 | sed 's/VC_category=//g' | sed 's/\t/;/g' | sed 's/;none/;NA/g' > UBE05_D002;
#sort -V -k 1,1 -k 4,4 -k 5,5 UBE05_B003 | awk -F "\t" '$3 =="mRNA"' | sed 's/;/\t/g' | cut -f 1,32 | sed -E 's/ncvog=NA/NA/g' | sed 's/ncvog=[0-9]*/NCVOG/g' | sed 's/\t/;/g' > UBE05_D003;
#sort -V -k 1,1 -k 4,4 -k 5,5 UBE05_B003 | awk -F "\t" '$3 =="mRNA"' | sed 's/;/\t/g' | cut -f 1,34 | sed -E 's/ncvfg=NA/NA/g' | sed -E 's/ncvfg=.*/NCVFG/g' | sed 's/\t/;/g' > UBE05_D004;

#for file in $(sed 's/$/;/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E000; ## all gene count
#for file in $(sed 's/$/;NA/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E001; ## non UBE gene count

#for file in $(sed 's/$/;VR_Cr/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E002.1; for file in $(sed 's/$/;Vr_Cu/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E002.2; for file in $(sed 's/$/;Vr_Co/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E002.3; for file in $(sed 's/$/;Vu_Co/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E002.4; ## UBE virus gene count
#paste UBE05_E002.1 UBE05_E002.2 UBE05_E002.3 UBE05_E002.4 | awk '{print $1+$2+$3+$4}' > UBE05_E002; ## UBE virus gene count

#for file in $(sed 's/$/;Vr_CR/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E003.1; for file in $(sed 's/$/;Vu_Cr/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E003.2; for file in $(sed 's/$/;Vo_Cr/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E003.3; for file in $(sed 's/$/;Vo_Cu/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E003.4; ## UBE cellular gene count
#paste UBE05_E003.1 UBE05_E003.2 UBE05_E003.3 UBE05_E003.4 | awk '{print $1+$2+$3+$4}' > UBE05_E003; ## UBE cellular gene count

#for file in $(sed 's/$/;Vr_Cr/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E004.1; for file in $(sed 's/$/;Vu_Cu/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E004.2; ## UBE virus_or_cellular gene count
#paste UBE05_E004.1 UBE05_E004.2 | awk '{print $1+$2}' > UBE05_E004; ## UBE virus_or_cellular gene count

#for file in $(sed 's/$/;Vo_Co/g' UBE05_D001); do grep -c $file UBE05_D002; done > UBE05_E005; ## UBE ORFan gene count

#for file in $(sed 's/$/;NCVOG/g' UBE05_D001); do grep -c $file UBE05_D003; done > UBE05_E006; ## UBE NCV orthogroup genes count
#for file in $(sed 's/$/;NCVFG/g' UBE05_D001); do grep -c $file UBE05_D004; done > UBE05_E007; ## UBE NCV orthofunction genes count

#echo "contig;all_genes;non-UBE_genes;viral_UBE_genes;cellular_UBE_genes;viral_or_cellular_UBE_genes;ORFan_UBE_genes;NCV_orthogroup_UBE_genes;NCV_orthogroup_function_UBE_genes" | sed 's/;/\t/g' > UBE05_E008_header;
#paste UBE05_D001 UBE05_E000 UBE05_E001 UBE05_E002 UBE05_E003 UBE05_E004 UBE05_E005 UBE05_E006 UBE05_E007 | sort -V -k 1,1 | cat UBE05_E008_header - > UBE05_E008_contig_counts;
#sed '1d' UBE05_C005_best_cluster_counts | cut -d ":" -f 1 | cat UBE05_D001 - | sort -V | uniq -u | sed -E 's/(.*)/\1:clusterNA-NA\tNA\tNA\tNA\tNA\tNA\tNA\tNA/g' | cat UBE05_C005_best_cluster_counts - | sed '1d' | sort -t ":" -V -k 1,1 | cat UBE05_C005_header - | paste UBE05_E008_contig_counts - > UBE05_E009_contig_cluster_counts;

##### PREP DATA FOR R: scattergraphs of relative Blastp scores virus vs cellular
##### required output format(\t delimited with headers): gene viral_relative_blastp_score cellular_relative_blastp_score taxonomic_group
##### e.g.: #B004 Cladosiphon-okamuranus_SP_contig10.3974.1 vaa_relative_bitscore=0.37 caa_relative_bitscore=0.97 taxid
##### from B003: staxid=23232

#echo "gene;viral_relative_blastp_bitscore;cellular_relative_blastp_bitscore;taxonomic_group" | sed 's/;/\t/g' > UBE05_R001_header;
#sort -V -k 1,1 -k 4,4 -k 5,5 UBE05_B004 | awk -F "\t" '$3 =="mRNA"' | awk -F ";" '$73 =="VC_category=VR_Cr" || $73 =="VC_category=Vr_CR" || $73 =="VC_category=Vr_Cr" || $73 =="VC_category=Vr_Cu" || $73 =="VC_category=Vr_Co"' | cut -d ";" -f 41,71-72 | sed -E 's/^.*=(.*);.*=(.*);.*=(.*)/\1\t\2\t\3/g' | sed 's/\tUR\|\tnone/\t0.00/g' | sed 's/\t1\.[0-9][0-9]/\t1.00/g' > UBE05_R001_aa;
#sort -V -k 1,1 -k 4,4 -k 5,5 UBE05_B003 | awk -F "\t" '$3 =="mRNA"' | awk -F ";" '$23 =="VC_category=VR_Cr" || $23 =="VC_category=Vr_CR" || $23 =="VC_category=Vr_Cr" || $23 =="VC_category=Vr_Cu" || $23 =="VC_category=Vr_Co"' | cut -d ";" -f 21 | awk -F "\t" '$0 !~ "cnt_staxids" && $0 !~ "vnt_staxids"' | sed 's/=/_/g' | cut -d "_" -f 3 | sed -E 's/(.*)/__\1__/g' > UBE05_R002_aa;
#sed 's/\t|\t/;/g' $taxids | sed 's/;/__\t/1' | sed 's/\t|//g' | sed 's/^/__/1' | awk -F "\t" 'NR==FNR {a[$0]++;next} ($1 in a)' UBE05_R002_aa - | awk -F "\t" 'FNR==NR { array[$1]=$2; next } { for (i in array) gsub("\\<"i"\\>", array[i]) }1' - UBE05_R002_aa > UBE05_R003_aa; ## replace taxids with taxonomy

#cut -f 1 UBE05_R001_aa | sed -E 's/mRNA\.(.*)_.*\.[0-9]*\.[0-9]*/\1/g' > UBE05_R001.1_aa; awk -F ";" 'BEGIN{OFS=";"}; {print $9,$8,$7,$6,$5,$4,$3,$2,$1}' UBE05_R003_aa | sed -E 's/(;);*/\1/g' | sed -E 's/^;//g' | cut -d ";" -f 1,2 | sed 's/Archaea.*\|Bacteria.*/Prokaryote/g' | sed 's/Eukaryota;Phaeophyceae/Phaeophyceae/g' | sed 's/Eukaryota.*/Eukaryota/g' | sed 's/Viruses;Bamfordvirae/Nucleocytoviricota/g' | sed 's/Viruses;.*/Other_virus/g' | sed 's/__NA__/No_taxid/g' | paste UBE05_R001.1_aa UBE05_R001_aa - > UBE05_R005_aa; awk '{print > "UBE05_R005_aa_"$1}' UBE05_R005_aa;
#for file in  UBE05_R005_aa_*; do cut --complement -f 1 $file | cat UBE05_R001_header - > "$file"_ggplot; done;

#awk -F ";" 'BEGIN{OFS=";"}; {print $9,$8,$7,$6,$5,$4,$3,$2,$1}' UBE05_R003_aa | sed -E 's/(;);*/\1/g' | sed -E 's/^;//g' | sed 's/Archaea.*\|Bacteria.*/Prokaryote/g' | sed 's/.*Phaeophyceae.*/Phaeophyceae/g' | sed 's/Eukaryota.*/Eukaryota/g' | sed 's/__NA__/No_taxid/g' | cut -d ";" -f 1,2,3,4,5,6,7 | sed -E 's/\t| /_/g' | paste - UBE05_R005_aa | cut -f 1,2 > UBE05_R006.1_aa; cut -f 1 UBE05_R006.1_aa | sort -Vu | sed -E '/^__[0-9]+__$/d' > UBE05_R006.2_aa; awk -F "\t" '{print > "UBE05_R006.3_aa_"$2}' UBE05_R006.1_aa; 
#mkdir taxa_UBE05_R006; while read line; do grep -c $line UBE05_R006.3_aa_* > UBE05_R006.4_aa_"$line"; done < UBE05_R006.2_aa; mv UBE05_R006.4_aa_* taxa_UBE05_R006;
#for file in taxa_UBE05_R006/UBE05_R006.4_aa_*; do cut -d ":" -f 2 $file | sed 's/$/\t/g' | tr -d '\n' | sed 's/\t$/\n/g' > "$file"_VVV2; done;
#cut -f 2 UBE05_R006.1_aa | sort -Vu | sed 's/$/\t/g' | tr -d '\n' | sed 's/$/\n/g' | sed 's/^/taxonomic_group\t/1' > UBE05_R006.5_aa; cat taxa_UBE05_R006/UBE05_R006.4_aa_*_VVV2 | paste UBE05_R006.2_aa - | cat UBE05_R006.5_aa - > UBE05_R006.6_aa;

##### make presence absence table of conserved NCV genes for each genome
#cut -f 2-4 UBE05_K002 | sort -Vu | sed 's/\t/;/g' > UBE05_U001; for file in UBE05_B005_*.gff; do awk '$3 =="mRNA"' $file | cut -d ";" -f 24-26 | sed 's/\t/;/g' > UBE05_U002_"$file"; done; while read line; do grep -c $line UBE05_U002_* >> UBE05_U003; done < UBE05_U001; sed -i -E 's/UBE05_U002_UBE05_B005_(.*).gff:/\1\t/g' UBE05_U003;
#awk '{print $2 > "UBE05_U004_"$1}' UBE05_U003;
#cut -f 1 UBE05_U003 | awk '!a[$1]++' | sed 's/$/\t/g' | tr -d "\n" | sed 's/^/NCVOG\tNCVOG_protein_name\tNCVOG_functional_group\t/g' | sed 's/$/\n/g' > UBE05_U001_header;
#paste UBE05_U001 UBE05_U004_* | sed 's/;/\t/g' | sed 's/ncvog=\|ncvog_prot_name=\|ncvfg=//g' | cat UBE05_U001_header - > UBE05_U005;



##### simplified gffs to assess in excel, with help from count files- make notes in count file copy to ID contigs/clusters to be visualised
#echo "contig;start;end;gene;exons;evalue;ssalltitles;hit_type;sskingdoms;VC_category;NCVOG;NCVOG_name;NCVFG" | sed 's/;/\t/g' > UBE05_S001_header;
for file in UBE05_B005_*.gff; do awk '$3 =="mRNA"' $file | cut --complement -f 2,3,6-8 | cut -d ";" -f 1,7,10-11,18-20,22-27 | sed 's/;/\t/g' | sed -E 's/[a-z]([a-z][a-z])_sskingdoms=/\1\t/g' | sed 's/ncvog=\|ncvog_prot_name=\|ncvfg=\|ID=\|exons=\|VC_category=\|[a-z][a-z][a-z]_pident=\|[a-z][a-z][a-z]_ssalltitles=\|[a-z][a-z][a-z]_length=\|[a-z][a-z][a-z]_bitscore=\|[a-z][a-z][a-z]_evalue=//g' | sed 's/;/\t/g' | cat UBE05_S001_header - > $(basename $file .gff)_SUMMARY; done;

##### reformat gff for R gggenes, later manually edit to leave only regions of interest identified by manual inspection of _SUMMARY files
###make key to label key NCVOG genes with letters:
#echo "0026;0038;0249;0076;0022;0052;0031;0304;1164;0241;1353;0276;0262;0278;0010;0317;1192;0041;1087;0225;1423;1076;1175" | sed 's/;/\n/g' | sed -E 's/(.*)/ncvog=\1/g' > UBE05_T000.1;
#echo "[5];[B];[3];[1];[M];[T];[6];[S];[2];[P];[R];[r];[u];[h];[b];[t];[e];[a];[c];[L];[u];[I];[i]" | sed 's/;/\n/g' | sed -E 's/(.*)/ncvog=\1/g' | paste UBE05_T000.1 - > UBE05_T000.2;
#echo "molecule;gene;start;end;strand;direction;label" | sed 's/;/\t/g' > UBE05_T001_header;
#for file in UBE05_B005_*.gff; do awk '$3 =="mRNA"' $file | cut -d ";" -f 1,20,22,24-26 | awk 'FNR==NR { array[$1]=$2; next } { for (i in array) gsub("\\<"i"\\>", array[i]) }1' UBE05_T000.2 - | sed 's/ID=\|[a-z][a-z][a-z]_sskingdoms=\|ncvog_prot_name=\|ncvfg=\|[a-z][a-z][a-z]_ssalltitles=//g' | awk -F ";" 'BEGIN{OFS=";"} {if($3 =="NA" || $3 =="none") print $1,$3; else print $0}' | awk -F ";" 'BEGIN{OFS=";"} {if($3 =="Cellular") print $1,$3";[C]"; else print $0}' | awk -F ";" 'BEGIN{OFS=";"} {if($3 =="Viruses" && ($4 =="ncvog=NA" || $6 =="NA")) print $1";Viral",$2; else print $0}' | awk -F ";" 'BEGIN{OFS=";"} {if($3 =="Viruses" && $4 ~ /ncvog=[0-9][0-9][0-9][0-9]/) print $1,$6; else print $0}' | awk -F ";" 'BEGIN{OFS=";"} {if($3 =="Viruses" && $4 ~ /ncvog=./) print $1,$6,$4; else print $0}' | sed 's/;NA$\|;Cellular/;non-UBE/g' | sed 's/;none$/;ORFan/g' | awk -F "\t|;" 'BEGIN{OFS="\t"} {print $1,$10,$4,$5,$7,$11}' | sed 's/ncvog=//g' | sed 's/\t+/\tforward\t1/' | sed 's/\t-/\treverse\t-1/' | sed 's/Miscellaneous\|Other_metabolic_functions\|Uncharacterized/Miscellaneous_and_uncharacterised/g' | cat UBE05_T001_header - >> UBE05_T001; done;

#cut -f 7 UBE05_T001 | awk '{if($0 !~ /virus|Virus|viridae|Viridae|virales|Virales|phage|Phage|^label$/ && $0 !~ /^\[[a-z]\]$|^\[[0-9]\]$|ctocarpus|eldmannia/) print ""; else print $0}' | sed -E 's/^(acc_)[Aa-Zz]+_[Aa-Zz]..[0-9]+\.[0-9]_/\1/g' | sed -E 's/^acc_[Aa-Zz]+_[Aa-Zz][Aa-Zz].[0-9]+_//g' | sed 's/^acc_\|.ypothetical_.rotein\|.utative\|UNVERIFIED_//g' | sed 's/^_//g' | cut -d "_" -f 1 | paste UBE05_T001 - | cut --complement -f 7 > UBE05_T002;


##### then MANUALLY extract clusters (_SUMMARY files and UBE05_E009_contig_cluster_counts (make notes on separate version of E009: add colums Note_viral_clusters AND Region_to_visualise)) to visualise and split any larger ones into 50 gene chunks
##### example workflow:
## grep "Ec32_V2_contig06" UBE05_T002 > UBE05_T002_Ec32_V2_contig06;
## split -l 50 UBE05_T002_Ec32_V2_contig06 UBE05_T002_contig06_;
## sed -i 's/Ec32_V2_contig06/Ec32_06.1/g' UBE05_T002_contig06_aa; sed -i 's/Ec32_V2_contig06/Ec32_06.2/g' UBE05_T002_contig06_ab;cat UBE05_T002_contig06_aa UBE05_T002_contig06_ab > UBE05_T001_contig06_gggenes;sed -i 's/Ec32_V2_contig06/Ec32_06.3/g' UBE05_T002_contig06_ac;sed -i 's/Ec32_V2_contig06/Ec32_06.4/g' UBE05_T002_contig06_ad;
## cat UBE05_T002_contig06_aa UBE05_T002_contig06_ab UBE05_T002_contig06_ac UBE05_T002_contig06_ad > UBE05_T002_contig06_gggenes

##### core gene count summary
core="/projet/fr2424/sib/dmckeown/phaeoex_screen/finalresult/NCV_core_gene_info";
#cut -f 11 $core | awk '/[0-9]+/' | sed 's/^/ncvog=/g' | sort -Vu > UBE05_N001;
#while read line; do grep -c $line UBE05_B006_*.gff > UBE05_N002_"$line"; done < UBE05_N001;
#mkdir core_UBE05_N002; mv UBE05_N002_* core_UBE05_N002;
#for file in core_UBE05_N002/UBE05_N002_*; do cut -d ":" -f 2 $file | sed 's/$/\t/g' | tr -d '\n' | sed 's/\t$/\n/g' > "$file"_VVV2; done;
#ls UBE05_B006_*.gff | sed 's/$/\t/g' | tr -d '\n' | sed 's/$/\n/g' | sed 's/^/gene_name\tcomment\tncvog_group\tcore_gene_ncvog\t/1' | sed 's/UBE05_B006_\|.gff//g' > UBE05_N003;
#cat core_UBE05_N002/UBE05_N002_*_VVV2 | paste UBE05_N001 - > UBE05_N004;
#awk -F "\t" '$11 ~ /[0-9]+/' $core | sort -t $'\t' -Vu -k 11,11 | cut -f 1,9,10 | paste - UBE05_N004 | cat UBE05_N003 - > UBE05_N005;

# Get summary of job stats
# ------------------------
# Get (max) memory consumption
echo "$(qstat -f -j $JOB_ID | grep vmem)" 1>&2
# Print end of job. If not printed, job died before the end.
echo "$(date) job $JOB_NAME done" 1>&2
