#!/bin/bash
#$ -S /bin/bash
#$ -V
#$ -cwd
## Queue settings (can be set at runtime in the qsub submition line)
#$ -q long.q
## [Optional] to ask between 1 and 4 processors
#$ -pe thread 6-8
## [Recommended] Ask for at least 1GB of memory for the job
#$ -l mem_free=12G
## [Recommended] Kill the job if it eats 4GB per slot (i.e. thread) 
## here it means between 8GB*1 thread=8GB and 8GB*6 threads=48GB
#$ -l h_vmem=32G

# Print information about the current job
# ---------------------------------------
# Print beginning of job
echo "$(date) job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME" 1>&2
# Print the number of threads used
echo "NSLOTS = $NSLOTS" 1>&2

##### Public genomes: #####
#og="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/00__PUBLIC_GENOMES_ANNOTATIONS/*.gff"
#ofn="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/00__PUBLIC_GENOMES_ASSEMBLIES/*.fa"
#ofa="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/00__PUBLIC_GENOMES_PROTEOMES/*.fa"

##### Phaeoexplorer genomes: #####
#og="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/02__FINAL_ANNOTATIONS/phex_1-20/*.gff" ## original gffs
#ofn="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/01__FINAL_GENOME_ASSEMBLIES/phex_1-20/*.fa" ## original fastas nucleotide
#ofa="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/04__FINAL_PROTEOMES/phex_1-20/*.fa" ## original fastas amino acid

og="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/02__FINAL_ANNOTATIONS/phex_21-33/*.gff" ## original gffs
ofn="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/01__FINAL_GENOME_ASSEMBLIES/phex_21-33/*.fa" ## original fastas nucleotide
ofa="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/04__FINAL_PROTEOMES/phex_21-33/*.fa" ## original fastas amino acid


##### make fastas of former subjects

### get lists of subjects to extract from DB fastas; NTs; M001 is nt (from vnt and nnt); M002 is RVDB, and M003 is GOV: of genes only with either Virus hit only or Virus and Cellular hit
#awk -F"\t" '$2 !="none"' UBE03_B001_vnt.1 | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $2,$13,$9,$10}' | grep "gi|" | awk -F"\t" '$2 !="none"' UBE03_B001_vnt.1 | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $2,$13,$9,$10}' | grep "gi|" | sed -E 's/gi\|.*\|.*\|(.*[0-9]*\.[0-9]*)\|.*\t(.*\t[0-9]*\t[0-9]*)/\1\t\2/g' | cut --complement -f 2 > UBE03_M001_nt;
#awk -F"\t" '$2 !="none"' UBE03_B001_vnt.1 | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $2,$9,$10}' | grep -v "gi|" | grep "acc|" > UBE03_M002_nt;
#wk -F"\t" '$2 !="none"' UBE03_B001_vnt.1 | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $2,$13,$9,$10}' | grep -v "gi|" | grep -v "acc|" | cut --complement -f 1 > UBE03_M003_nt;
#awk -F"\t" '$2 !="none" && $17 !="none"' UBE03_B001_vnt.1 | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $17,$28,$24,$25}' | grep "gi|" | sed -E 's/gi\|.*\|.*\|(.*[0-9]*\.[0-9]*)\|.*\t(.*\t[0-9]*\t[0-9]*)/\1\t\2/g' | cut --complement -f 2 >> UBE03_M001_nt;
#awk -F"\t" '$2 !="none" && $17 !="none"' UBE03_B001_vnt.1 | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $17,$24,$25}' | grep -v "gi|" | grep "acc|" >> UBE03_M002_nt;
#awk -F"\t" '$2 !="none" && $17 !="none"' UBE03_B001_vnt.1 | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $17,$28,$24,$25}' | grep -v "gi|" | grep -v "acc|" | cut --complement -f 1 >> UBE03_M003_nt;
#awk -F"\t" '$2 !="none"' UBE03_B001_nnt.1 | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $2,$13,$9,$10}' | grep "gi|" | sed -E 's/gi\|.*\|.*\|(.*[0-9]*\.[0-9]*)\|.*\t(.*\t[0-9]*\t[0-9]*)/\1\t\2/g' | cut --complement -f 2 >> UBE03_M001_nt;
#awk -F"\t" '$2 !="none" && $17 !="none"' UBE03_B001_nnt.1 | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $17,$28,$24,$25}' | grep "gi|" | sed -E 's/gi\|.*\|.*\|(.*[0-9]*\.[0-9]*)\|.*\t(.*\t[0-9]*\t[0-9]*)/\1\t\2/g' | cut --complement -f 2 >> UBE03_M001_nt;
#sort -Vu UBE03_M001_nt -o UBE03_M001_nt; sort -Vu UBE03_M002_nt -o UBE03_M002_nt; sort -Vu UBE03_M003_nt -o UBE03_M003_nt;

#cut -f 1 UBE03_M001_nt | sort -Vu | seqtk subseq /db/nt/current/flat/nt - > UBE03_M001_nt.fa; ## get whole fastas from db fasta for bedtools to work on 
#grep ">" UBE03_M001_nt.fa | sed 's/^>//g' | cut -f 1 > UBE03_M001_nt_deflines;
#cut -f 1 UBE03_M001_nt | sort -Vu | grep -v -f UBE03_M001_nt_deflines - > UBE03_M001_nt_missing; ## MANUALLY download, add \t after >accession and add these sequences to UBE03_M001_nt.fa
#cut -f 1 UBE03_M002_nt | sort -Vu | seqtk subseq /projet/fr2424/sib/dmckeown/db/virus/fastas/C-RVDBv17.0.fa - > UBE03_M002_nt.fa;
#cut -f 1 UBE03_M003_nt | sort -Vu | seqtk subseq /projet/fr2424/sib/dmckeown/db/virus/fastas/GOV2_viral_populations_larger_than_5KB_or_circular.fasta - > UBE03_M003_nt.fa;
##### RUN TO HERE FIRST - check previous section for MANUAL STEP

##### make blast DBs of former queries and run reciprocal BLASTS

#source $CONDA3/activate /usr/local/genome2/conda3/envs/blast-2.9.0;
#cat UBE02_A002_nnt_*.fa UBE02_A002_vnt_*.fa | makeblastdb -in - -dbtype nucl -out UBE03_N001_nt -title UBE03_N001_nt;
#cat UBE03_M001_nt.fa UBE03_M002_nt.fa UBE03_M003_nt.fa | blastn -query - -db "UBE03_N001_nt" -out UBE03_M004_nt.blast -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore salltitles" -task dc-megablast -evalue 0.001 -max_target_seqs 100 -num_threads $NSLOTS;

#cat UBE02_A002_vnt*.fa | blastn -query - -db "UBE03_N001_nt" -dust no -soft_masking false -out UBE03_M004_vnt_self_hits.blast -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore salltitles" -task dc-megablast -evalue 10 -max_target_seqs 25 -num_threads $NSLOTS; cat UBE02_A002_nnt*.fa | blastn -query - -db "UBE03_N001_nt" -dust no -soft_masking false -out UBE03_M004_nnt_self_hits.blast -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore salltitles" -task dc-megablast -evalue 10 -max_target_seqs 25 -num_threads $NSLOTS;
#conda deactivate;

############ MAP reciprocal BLASTS back to original BLASTs NT:
#cat UBE03_B001_nnt.1 UBE03_B001_vnt.1 | awk -F "\t" '{print $2":"$9"-"$10";"$1";"}' | sed -E 's/gi\|[0-9]*\|.*\|(.*[0-9]*\.[0-9]*)\|.*(:[0-9]*-[0-9]*;.*:.*;)/\1\2/g' | sed 's/|/_/g' | sed 's/;;/;/g' > UBE03_M006_nt;
#cat UBE03_B001_nnt.1 UBE03_B001_vnt.1 | awk -F "\t" '{print $17":"$24"-"$25";"$16";"}' | sed -E 's/gi\|[0-9]*\|.*\|(.*[0-9]*\.[0-9]*)\|.*(:[0-9]*-[0-9]*;.*:.*;)/\1\2/g' | sed 's/|/_/g' | sed 's/;;/;/g' > UBE03_M007_nt;
#awk -F "\t" 'BEGIN{OFS="\t"} ; {print $1":"$7"-"$8,$0}' UBE03_M004_nt.blast | awk -F "\t" '{print $1";"$3";\tR_R_R;"$13}' > UBE03_M008_nt; awk -F "\t" 'BEGIN{OFS="\t"} ; {print $1":"$8"-"$7,$0}' UBE03_M004_nt.blast | awk -F "\t" '{print $1";"$3";\tR_R_R;"$13}' >> UBE03_M008_nt; sort -Vu UBE03_M008_nt -o UBE03_M008_nt; sed -i 's/|/_/g' UBE03_M008_nt; sed -i 's/;;/;/g' UBE03_M008_nt;
#awk -F "\t" 'NR==FNR {a[$1]++;next} ($1 in a)' UBE03_M006_nt UBE03_M008_nt > UBE03_M008.1_nt;
#awk -F "\t" 'NR==FNR {a[$1]++;next} ($1 in a)' UBE03_M007_nt UBE03_M008_nt > UBE03_M008.2_nt;

### RUN TO HERE SECOND, then run the following 2 lines in separate runs
#awk -F "\t" 'FNR==NR { array[$1]=$2; next } { for (i in array) gsub(i, array[i]) }1' UBE03_M008.1_nt UBE03_M006_nt > UBE03_M009_nt;
awk -F "\t" 'FNR==NR { array[$1]=$2; next } { for (i in array) gsub(i, array[i]) }1' UBE03_M008.2_nt UBE03_M007_nt > UBE03_M010_nt;

#awk -F "\t" '$3 =="100.000" {print $1"\t"$12}' UBE03_M004_vnt_self_hits.blast | awk '!a[$1]++' | sort -V -k 1,1 > UBE03_M011_vnt; awk -F "\t" '$3 =="100.000" {print $1"\t"$12}' UBE03_M004_nnt_self_hits.blast | awk '!a[$1]++' | sort -V -k 1,1  > UBE03_M011_nnt;

#cat UBE03_B001_nnt.1 UBE03_B001_vnt.1 | paste - UBE03_M009_nt UBE03_M010_nt > UBE03_M012_nt;
#cat UBE03_M011_nnt UBE03_M011_vnt | paste UBE03_M012_nt - > UBE03_M013_nt;

#awk -F "\t" '{print $31}' UBE03_M013_nt | sed 's/R_R_R;//g' | sed 's/none:none-none;.*;/none/g' | sed 's/.*;.*;/UR/g' > UBE03_M014_nt;
#awk -F "\t" '{print $32":::::"$34}' UBE03_M013_nt | sed 's/R_R_R;//g' | sed 's/none:none-none;.*;/none/g' | sed 's/.*;.*;/UR/g' | sed 's/:::::/\t/g' | paste UBE03_M014_nt - | awk -F "\t" 'BEGIN{OFS="\t"} ; {if($1 !="none" && $1 !="UR" && $2 !="none" && $2 !="UR") printf ("%.2f\t%.2f\n", $1/$3,$2/$3) ; else print $1,$2,$3}' | awk -F "\t" 'BEGIN{OFS="\t"} ; {if($1 !="none" && $1 !="UR" && $2 =="none") printf ("%.2f\tnone\n", $1/$3) ; else print $1,$2,$3}' | awk -F "\t" 'BEGIN{OFS="\t"} ; {if($1 !="none" && $1 !="UR" && $2 =="UR") printf ("%.2f\tUR\n", $1/$3) ; else print $1,$2,$3}' | awk -F "\t" 'BEGIN{OFS="\t"} ; {if($1 =="UR" && ($2 !="UR" && $2 !="none")) printf("UR\t%.2f\n", $2/$3) ; else print $1,$2,$3}' | awk -F "\t" 'BEGIN{OFS="\t"} ; {if($1 =="none" && ($2 !="UR" && $2 !="none")) printf("none\t%.2f\n", $2/$3) ; else print $1,$2}' | paste UBE03_M013_nt - | cut --complement -f 31-34 > UBE03_M015_nt; ## calculate and add relative blast bitscores (hit/self hit): $31 viral, $32 cellular

###### now categorise each gene, separately for NT and AA, according to their relative BLAST scores, as: 
### Viruses[Reciprocated > Cellular, reciprocated <= Cellular, unreciprocated, ORFan]_Cellular[Reciprocated > Viruses, reciprocated <= Viruses, unreciprocated, ORFan]: V[R,r,u,o]_C[R,r,u,o]

#cut -f 31-32 UBE03_M015_nt | awk -F "\t" '{if($1 ~ /[0-9]*\.[0-9]*/ && $2 ~ /[0-9]*\.[0-9]*/ && $1 > $2) print "VR_Cr" ; else print $0}' | awk -F "\t" '{if($1 ~ /[0-9]*\.[0-9]*/ && $2 ~ /[0-9]*\.[0-9]*/ && $1 < $2) print "Vr_CR" ; else print $0}' | awk -F "\t" '{if($1 ~ /[0-9]*\.[0-9]*/ && $2 ~ /[0-9]*\.[0-9]*/ && $1 == $2) print "Vr_Cr" ; else print $0}' | awk -F "\t" '{if($1 ~ /[0-9]*\.[0-9]*/ && $2 =="UR") print "Vr_Cu" ; else print $0}' | awk -F "\t" '{if($1 ~ /[0-9]*\.[0-9]*/ && $2 =="none") print "Vr_Co" ; else print $0}' | awk -F "\t" '{if($1 =="UR" && $2 ~ /[0-9]*\.[0-9]*/) print "Vu_Cr" ; else print $0}' | awk -F "\t" '{if($1 =="none" && $2 ~ /[0-9]*\.[0-9]*/) print "Vo_Cr" ; else print $0}' | awk -F "\t" '{if($1 =="UR" && $2 =="UR") print "Vu_Cu" ; else print $0}' | awk -F "\t" '{if($1 =="UR" && $2 =="none") print "Vu_Co" ; else print $0}' | awk -F "\t" '{if($1 =="none" && $2 =="UR") print "Vo_Cu" ; else print $0}' | awk -F "\t" '{if($1 =="none" && $2 =="none") print "Vo_Co" ; else print $0}' | paste UBE03_M015_nt - > UBE03_P001_nt;


###### for nt and aa separately, prepare a file with all gff info and both viruses cell hit information and all unblasted genes

### NT
#sort -V -k 1,1 UBE03_P001_nt | sed 's/;/_/g' | awk -F "\t" 'BEGIN{OFS=";"} ; {print "vnt_qseqid="$1,"vnt_sseqid="$2,"vnt_pident="$3,"vnt_length="$4,"vnt_mismatch="$5,"vnt_gapopen="$6,"vnt_qstart="$7,"vnt_qend="$8,"vnt_sstart="$9,"vnt_send="$10,"vnt_evalue="$11,"vnt_bitscore="$12,"vnt_ssalltitles="$13,"vnt_staxids="$14,"vnt_sskingdoms="$15,"cnt_qseqid="$16,"cnt_sseqid="$17,"cnt_pident="$18,"cnt_length="$19,"cnt_mismatch="$20,"cnt_gapopen="$21,"cnt_qstart="$22,"cnt_qend="$23,"cnt_sstart="$24,"cnt_send="$25,"cnt_evalue="$26,"cnt_bitscore="$27,"cnt_ssalltitles="$28,"cnt_staxids="$29,"cnt_sskingdoms="$30,"vnt_relative_bitscore="$31,"cnt_relative_bitscore="$32,"VC_category="$33}' > UBE03_P002_nt; ## label blast fields
#cut -d ";" -f 1 UBE03_P002_nt | sed -E 's/^vnt.*=(.*):([0-9]*)-([0-9]*)/\1\tGmove\tmRNA\t\2\t\3/g' | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $1,$2,$3,$4+1,$5}' > UBE03_P003_nt; ## reformat gene name to search gff
#awk -F "\t" '$3 =="mRNA"' $og | sed 's/\t/;/5' | awk -F ";" 'NR==FNR {a[$0]++;next} ($1 in a)' UBE03_P003_nt - | sed 's/;/\t/1' | sort -V | awk '!a[$1,$2,$3,$4,$5]++' > UBE03_P004_nt; ## get inital gff info
paste UBE03_P003_nt UBE03_P002_nt | sort -V -k 1,5 | cut --complement -f 1-5 > UBE03_P002.1_nt; sort -V -k 1,5 UBE03_P004_nt > UBE03_P004.1_nt; paste -d ";" UBE03_P004.1_nt UBE03_P002.1_nt > UBE03_P006_nt;
#cat UBE03_P004_nt $og | sort -V | uniq -u | cat - UBE03_P006_nt | sort -V -k 1,1 -k 4,4 -k 5,5 | sed 's/$/;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA;NA/g' | cut -d ";" -f 1-40 > UBE03_P007_nt; ## get all other features and unblasted genes


# Get summary of job stats
# ------------------------
# Get (max) memory consumption
echo "$(qstat -f -j $JOB_ID | grep vmem)" 1>&2
# Print end of job. If not printed, job died before the end.
echo "$(date) job $JOB_NAME done" 1>&2
