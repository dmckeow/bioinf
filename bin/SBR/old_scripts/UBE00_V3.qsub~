#!/bin/bash
#$ -S /bin/bash
#$ -V
#$ -cwd
## Queue settings (can be set at runtime in the qsub submition line)
#$ -q long.q
## [Optional] to ask between 1 and 4 processors
#$ -pe thread 4-8
#$ -m bea
## [Recommended] Ask for at least 1GB of memory for the job
#$ -l mem_free=8G
## [Recommended] Kill the job if it eats 4GB per slot (i.e. thread) 
## here it means between 8GB*1 thread=8GB and 8GB*6 threads=48GB
#$ -l h_vmem=32G

# Print information about the current job
# ---------------------------------------
# Print beginning of job
echo "$(date) job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME" 1>&2
# Print the number of threads used
echo "NSLOTS = $NSLOTS" 1>&2

##### input formatting gffs ($1 CL variable is original gff file):

## 1 ## MANUAL STEP: ensure that the gff has mRNA lines indicated by $3 == mRNA

## 3 ## ensure all gffs are: [fields 1-8 \t delimited] then [\tfield_9;] and [fields 10-15 ; delimited]. Field 15 is exons=. Add "empty" fields to make field count same
#awk '$3 =="mRNA" {print $0";empty;empty;empty;exons="}' $1 > UBE00_A003_$(basename $1 .gff);

## 4 ## add back in all the non-mRNA info
#awk '$3 !="mRNA"' $1 >> UBE00_A003_$(basename $1 .gff); sort -V -k 1,1 -k 4,4 UBE00_A003_$(basename $1 .gff) -o UBE00_A003_$(basename $1 .gff);

## 5 ## fix all gff field names (each line below is an example per specific genome)

#name="Cladosiphon-okamuranus_SP"; sed -E 's/scaffold([0-9]*)/Cladosiphon-okamuranus_SP_contig\1/g' UBE00_A003_"$name" | awk -F "\t|;" 'BEGIN{OFS="\t"} ; $9 = $1$9' | sed -E 's/(Cladosiphon-okamuranus_SP_contig[0-9]*)(Parent=)g([0-9]*)\.t([0-9]*)/\2mRNA.\1.\3.\4/g' | sed -E 's/(Cladosiphon-okamuranus_SP_contig[0-9]*)(ID=)g([0-9]*)\.t([0-9]*)\.cds/\2mRNA.\1.\3.\4/g' | sed -E 's/(Cladosiphon-okamuranus_SP_contig[0-9]*)(ID=)g([0-9]*)\.t([0-9]*)/\2mRNA.\1.\3.\4/g' | sed -E 's/(Cladosiphon-okamuranus_SP_contig[0-9]*)(ID=)g([0-9]*)/\2mRNA.\1.\3/g' | awk 'BEGIN{OFS="\t"} ; $10 = $1$10' | sed -E 's/\tCladosiphon-okamuranus_SP_contig[0-9]*$//g' | sed -E 's/(Cladosiphon-okamuranus_SP_contig[0-9]*)(Parent=)g([0-9]*)\.t([0-9]*)/\2mRNA.\1.\3.\4/g' | sed -E 's/(Cladosiphon-okamuranus_SP_contig[0-9]*)(Parent=)g([0-9]*)/\2mRNA.\1.\3/g' > UBE00_A004_"$name";

#sed -E 's/scaffold([0-9]*)_size[0-9]*/Nemacystus-decipiens_SP_contig\1/g' UBE00_A003_$(basename $1 .gff) | awk -F "\t|;" 'BEGIN{OFS="\t"} ; $9 = $1$9' | sed -E 's/(Nemacystus-decipiens_SP_contig[0-9]*)(Parent=)g([0-9]*)\.t([0-9]*)/\2mRNA.\1.\3.\4/g' | sed -E 's/(Nemacystus-decipiens_SP_contig[0-9]*)(ID=)g([0-9]*)\.t([0-9]*)\.cds/\2mRNA.\1.\3.\4/g' | sed -E 's/(Nemacystus-decipiens_SP_contig[0-9]*)(ID=)g([0-9]*)\.t([0-9]*)/\2mRNA.\1.\3.\4/g' | sed -E 's/(Nemacystus-decipiens_SP_contig[0-9]*)(ID=)g([0-9]*)/\2mRNA.\1.\3/g' | awk 'BEGIN{OFS="\t"} ; $10 = $1$10' | sed -E 's/\tNemacystus-decipiens_SP_contig[0-9]*$//g' | sed -E 's/(Nemacystus-decipiens_SP_contig[0-9]*)(Parent=)g([0-9]*)\.t([0-9]*)/\2mRNA.\1.\3.\4/g' | sed -E 's/(Nemacystus-decipiens_SP_contig[0-9]*)(Parent=)g([0-9]*)/\2mRNA.\1.\3/g' > UBE00_A004_$(basename $1 .gff);

#sed -E 's/scaffold([0-9]*)/Saccharina-japonica_SP_contig\1/g' UBE00_A003_Saccharina-japonica_SP | awk -F "\t|;" 'BEGIN{OFS="\t"} ; $9 = $1$9' | sed -E 's/(Saccharina-japonica_SP_contig[0-9]*)(ID=)evm\.TU\.SJ([0-9]*)/\2mRNA.\1.\3/g' | sed -E 's/(Saccharina-japonica_SP_contig[0-9]*)(ID=)SJ([0-9]*)/\2mRNA.\1.\3.1/g' | sed -E 's/(Saccharina-japonica_SP_contig[0-9]*)(ID=).*\.SJ([0-9]*)/\2mRNA.\1.\3.1/g' | sed -E 's/(Saccharina-japonica_SP_contig[0-9]*)(ID=).*\.SJ([0-9]*)/\2mRNA.\1.\3.1/g' | awk -F "\t|;" 'BEGIN{OFS="\t"} ; $10 = $1$10' | sed -E 's/(Saccharina-japonica_SP_contig[0-9]*)(Parent=)SJ([0-9]*)/\2mRNA.\1.\3/g' | sed -E 's/(Saccharina-japonica_SP_contig[0-9]*)(Parent=).*\.SJ([0-9]*)/\2mRNA.\1.\3/g' | sed -E 's/(Saccharina-japonica_SP_contig[0-9]*)(Name=).*SJ([0-9]*)/\2mRNA.\1.\3/g' > UBE00_A004_$(basename $1 .gff);

#sed -E 's/^HiC_scaffold_([0-9]*)/Undaria-pinnatifida_MALE_contig\1/g' UBE00_A003_Undaria-pinnatifida_MALE | sed -E 's/HiC_scaffold_([0-9]*)/mRNA.Undaria-pinnatifida_MALE_contig\1/g' | sed -E 's/(mRNA\.Undaria-pinnatifida_MALE_contig[0-9]*\.)g([0-9]*\.)m([0-9]*)/\1\2\3/g' | sed -E 's/(mRNA\.Undaria-pinnatifida_MALE_contig[0-9]*\.)g([0-9]*)/\1\2/g' | sed 's/;$//g' | sed 's/\.cds//g' > UBE00_A004_Undaria-pinnatifida_MALE;

#sed 's/Ec-sdr_f_/Ec-99_/g' UBE00_A003_Ec32_V2 | sed 's/^sdr_f/chr_99/g' | sed -E 's/chr_([0-9][0-9])/Ec32_V2_contig\1/g' | sed -E 's/Ec-([0-9][0-9])_([0-9]*\.[0-9]*)/mRNA.Ec32_V2_contig\1\.\2/g' | sed -E 's/Ec-([0-9][0-9])_([0-9]*)/mRNA.Ec32_V2_contig\1\.\2/g' | sed 's/\/pseudgene/pseudogene/g' | sed 's/contig99/sdr_f/g' > UBE00_A004_Ec32_V2;

## 6 ## change $3 to Gmove (if needed)
#sed -i 's/\tAUGUSTUS\t/\tGmove\t/g' UBE00_A004_$(basename $1 .gff);

##7 ## refix \t and ; delimiters (if needed)
#sed -i 's/\t/;/g9' UBE00_A004_$(basename $1 .gff);

## 8 ## get exons=n counts. Example workflow:
## Ec32 has 2 annotation types which have exons but no mRNA - pseudogene and lncRNA, so they must be excluded:
#awk -F "\t|;" '$3 =="mRNA" {print $9}' UBE00_A004_Ec32_V2 | sed 's/^.*=//g' > UBE00_B001_Ec32_V2; ## list gene names from mRNA
#awk -F "\t|;" '$3 =="exon" {print $10}' UBE00_A004_Ec32_V2 | sed 's/^.*=//g' | sort -Vu >> UBE00_B001_Ec32_V2; ## list gene names from exons
#sort -V UBE00_B001_Ec32_V2 | uniq -u > UBE00_B002_Ec32_V2; ## list gene names which have exons but NO mRNA
#awk '$3 =="exon"' UBE00_A004_Ec32_V2 | grep -v -f UBE00_B002_Ec32_V2 - | cut -d ";" -f 2 | sort -V | uniq -c > UBE00_B003_Ec32_V2;
#awk '$3 =="exon"' UBE00_A004_Saccharina-japonica_SP | cut -d ";" -f 2 | sort -V | uniq -c  > UBE00_B003_Saccharina-japonica_SP;
#awk '$3 =="exon"' UBE00_A004_Cladosiphon-okamuranus_SP | cut -f 9 | sort -V | uniq -c  > UBE00_B003_Cladosiphon-okamuranus_SP;
#awk '$3 =="exon"' UBE00_A004_Undaria-pinnatifida_MALE | cut -d ";" -f 2 | sort -V | uniq -c > UBE00_B003_Undaria-pinnatifida_MALE;
#awk '$3 =="exon"' UBE00_A004_Nemacystus-decipiens_SP | cut -f 9 | sort -V | uniq -c > UBE00_B003_Nemacystus-decipiens_SP;
#for file in UBE00_B003_*; do sed -i -E 's/^ *([0-9]*) *(.*)/\1;\2/g' $file; done; ## fix all the exon counts B003

## 9 ## put the gff back together again with exon counts
#name="Nemacystus-decipiens_SP"; awk '$3 =="mRNA"' UBE00_A004_"$name" | paste -d "" - UBE00_B003_"$name" | sed -E 's/(;exons=[0-9]*).*$/\1/g' > UBE00_C001_"$name".gff;
#name="Nemacystus-decipiens_SP"; awk '$3 !="mRNA"' UBE00_A004_"$name" >> UBE00_C001_"$name".gff; sort -V -k 1,1 -k 4,4 UBE00_C001_"$name".gff -o UBE00_C001_"$name".gff;
 

## 10 ## fix nucleotide (assembly) fasta
## should be simple to do manually

## 11 ## fix protein (proteome_ fasta

#sed -E 's/(>Ec-[0-9]*_[0-9]*\.[0-9]*).*/\1/g' Ec32_V2_proteins.fa | sed -E 's/(>Ec-sdr_f_[0-9]*\.[0-9]*).*/\1/g' | sed -E 's/Ec-(.*)_([0-9][0-9][0-9][0-9][0-9][0-9]\.[0-9]*)/mRNA.Ec32_V2_contig\1\.\2_assembled_CDS/g' | sed 's/contigsdr_f/sdr_f/g' > UBE00_Ec32_V2_proteins.fa;

## if, incredibly, the proteins do not have their scaffolds on them, you will have to get this info from the gff
#awk -F "\t|;" '$3 =="mRNA" {print $9}' ../00__PUBLIC_GENOMES_ANNOTATIONS/UBE00_C001_Nemacystus-decipiens_SP.gff | sed -E 's/ID=(mRNA\.Nemacystus-decipiens_SP_contig[0-9]*\.)([0-9]*)\.([0-9]*)/g\2.t\3\t\1\2.\3_assembled_CDS/g' | sort -V -k 1,1 > UBE00_D001_Nemacystus-decipiens_SP; ## get gene - scaffold.gene info
#awk 'FNR==NR { array[$1]=$2; next } { for (i in array) gsub(i, array[i]) }1'  UBE00_D001_Nemacystus-decipiens_SP Nemacystus-decipiens_SP_proteins.fa > UBE00_Nemacystus-decipiens_SP_proteins.fa; ## then this array will replace all the fastas names in file - this will be slow


## LAST STEP ## move files so that the all modified final files made by UBE00 are each in separate subfolders from any other file with the same suffix (.fa etc; for gff, assembly, and proteomes)
## ensure that the # of mRNAs in the gff are the same as the # of proteins in protein .fa and are from the same scaffolds in the nucleotide .fa

# Get summary of job stats
# ------------------------
# Get (max) memory consumption
echo "$(qstat -f -j $JOB_ID | grep vmem)" 1>&2
# Print end of job. If not printed, job died before the end.
echo "$(date) job $JOB_NAME done" 1>&2

