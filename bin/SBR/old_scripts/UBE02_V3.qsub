#!/bin/bash
#$ -S /bin/bash
#$ -V
#$ -cwd
## Queue settings (can be set at runtime in the qsub submition line)
#$ -q short.q
## [Optional] to ask between 1 and 4 processors
#$ -pe thread 8
## [Recommended] Ask for at least 1GB of memory for the job
#$ -l mem_free=1G
## [Recommended] Kill the job if it eats 4GB per slot (i.e. thread) 
## here it means between 8GB*1 thread=8GB and 8GB*6 threads=48GB
#$ -l h_vmem=32G

# Print information about the current job
# ---------------------------------------
# Print beginning of job
echo "$(date) job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME" 1>&2
# Print the number of threads used
echo "NSLOTS = $NSLOTS" 1>&2

##### Public genomes: #####
og="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/00__PUBLIC_GENOMES_ANNOTATIONS/*.gff"
ofn="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/00__PUBLIC_GENOMES_ASSEMBLIES/*.fa"
ofa="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/00__PUBLIC_GENOMES_PROTEOMES/*.fa"

##### Phaeoexplorer genomes: #####
#og="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/02__FINAL_ANNOTATIONS/*.gff" ## original gffs
#ofn="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/01__FINAL_GENOME_ASSEMBLIES/*.fa" ## original fastas nucleotide
#ofa="/projet/fr2424/sib/dmckeown/phaeoex_screen/input/04__FINAL_PROTEOMES/*.fa" ## original fastas amino acid


##### get fastas for all UBE genes with viral hit (vnt vaa/vUBE) and 1 gene at end of vUBE gene clusters (nnt naa/nUBE)

##### NUCLEOTIDE
#for file in UBE01_A003_nt*blast; do awk -F"\t" '{print $1}' $file | sort -V -u | sed -E 's/:[0-9]*-/&\t/g' | sed 's/-\t/\t/g' | sed 's/:/\tGmove\tmRNA\t/g' | awk -F"\t" 'BEGIN{OFS="\t"} ; {print $1,$2,$3,$4+1,$5}' | sort -V -k 1,1 -k 4,4 -k 5,5 >> UBE02_A001_vnt; done; ## reformat nt names to gene names to match gff
#grep -w -f UBE02_A001_vnt UBE01_A001 | sort -Vu -k 1,1 -k 4,4 -k 5,5 > UBE02_A001_vnt.gff; ## make gff of all vUBEs; sort -u removes duplicates from isoforms

sort -V -k 1,1 -k 4,4 -k 5,5 UBE01_A001 | grep -C1 -f UBE02_A001_vnt.gff -  | awk -F "\t|;" '$0 ~ /(exons=1|exons=2)$/ {print $0}' | sort -Vu -k 1,1 -k 4,4 -k 5,5 | sed '/^--$/d' > UBE02_A001_nnt; ## get gff of all genes at boundaries of vUBE clusters
#grep -vF -f UBE02_A001_vnt.gff UBE02_A001_nnt | sort -V -k 1,1 -k 4,4 -k 5,5 | uniq > UBE02_A001_nnt.gff #### remove vubes to get gff of genes at vUBE cluster boundaries

#while read line; do bedtools getfasta -fi $line -bed UBE02_A001_vnt.gff -fo UBE02_A002_vnt_"$(basename $line)"; done < UBE01_ofn; ## get vUBE fastas
#while read line; do bedtools getfasta -fi $line -bed UBE02_A001_nnt.gff -fo UBE02_A002_nnt_"$(basename $line)"; done < UBE01_ofn; ## get nUBE fastas

##### AMINO ACID
#for file in UBE01_A003_aa*blast; do awk -F"\t" '{print $1}' $file | sort -V -u >> UBE02_A001_vaa; done; ## list viral UBEs 
#grep -wF -f UBE02_A001_vaa UBE01_A001 | sort -V -k 1,1 -k 4,4 -k 5,5 | awk -F"\t|;" '{print $9}' | sed 's/ID=//g' | sed -E 's/.$/& assembled CDS/g' > UBE02_A002_vaa; ## reformat vUBE names to match fasta deflines

#sort -V -k 1,1 -k 4,4 -k 5,5 UBE01_A001 | grep -wF -C1 -f UBE02_A001_vaa - | sort -V -k 1,1 -k 4,4 -k 5,5 | uniq | awk -F"\t|;" '{print $9}' | sed 's/ID=//g' | sed -E 's/.$/& assembled CDS/g' | sed '/^$/d' > UBE02_A001_naa; ## list nUBE
#grep -vwF -f UBE02_A002_vaa UBE02_A001_naa | sort -V -k 1,1 -k 4,4 -k 5,5 | uniq > UBE02_A002_naa; ## remove vUBES to get final nUBE list

#while read line; do seqtk subseq $line UBE02_A002_vaa > UBE02_A002_vaa_"$(basename $line)"; done < UBE01_ofa; ## get vUBE fastas
#while read line; do seqtk subseq $line UBE02_A002_naa > UBE02_A002_naa_"$(basename $line)"; done < UBE01_ofa; ## get vUBE fastas

#for file in UBE02*UBE00*; do mv "$file" "${file//_UBE00_/_}"; done; ## public genomes only: fix script output names (remove UBE00)

# Get summary of job stats
# ------------------------
# Get (max) memory consumption
echo "$(qstat -f -j $JOB_ID | grep vmem)" 1>&2
# Print end of job. If not printed, job died before the end.
echo "$(date) job $JOB_NAME done" 1>&2

