#!/bin/bash

##### CL VARIABLES for contigs:
## $1 input .gff file (/projet/sbr/phaeoexplorer/02__FINAL_ANNOTATIONS/)
## $2 is species e.g. Ecto-Siliculosus-1a-F (must be same as contig names prefix)
##### CL VARIABLES for chromosomes:
## $1 is chromosome gff3 file /directory/
## File fields required (one line per full gene mRNA): f$1 unique code per contig/chromosome, f$9 same as f$1 with gene number, f$0 exons=n,  
## FUNCTION: extracts info of mono/bi exonic genes which occur in consectutive clusters of at least 2 genes
## this process will create as many files as contigs, so run in tmp and separate subfolders for each genome
##### CONTIG/CHROMOSOME instructions:
## @1 = disable for chromosomes, @2 and @3 = find/replace contig/chromosome options as required (within section)
##### Important outputs:
## UBE01_FINAL_[contig]
## [species][contig] (generated by awk -F ";" '{print > $1}' UBE01_mRNA_${2})

##### get mRNA info line for each gene from gff file ($1) then sort by contig & gene number (f$9), then split file by contig (f$1)
###########@1 CONTIGS ONLY STEPS: chromosomes preprocessed by Ec32_gff3_add_exons.sh @@@###############
awk '$9 ~ /ID/' $1 > UBE01_mRNA_${2}; ## ${2}_mRNA
sed -i 's/\t/\;/g' UBE01_mRNA_${2};
awk -F ";" '{print > $1}' UBE01_mRNA_${2};

##### extract U/B genes in clusters of >2 genes. If gene is U/B and follows a U/B gene, then the gene and its preceding gene are extracted
##############@2 CONTIGS: ${2}_contig* OR CHROMOSOME: ${1}chr* @@@################

sort -V -t ";" -k 9,9 ${2}*ontig* | awk -F ";" '/(exons=1|exons=2)$/ && p ~ /(exons=1|exons=2)$/ && f == $1 && ($4 - i) < 3500 {print p > "UBE01_001_"$1; print > "UBE01_001_"$1} {p=$0} {f=$1} {i=$5}'; ## "CLUSTERS1_"$1

###############@3 CONTIGS: ${2}* OR CHROMOSOMES: chr_* @@@#############

## duplicate genes separated by genes with >2 exons and < specified intergenetic gap length (3500)
sort -V -t ";" -k 9,9 UBE01_001_${2}* | awk -F ";" '/(exons=1|exons=2)$/ && p ~ /(exons=1|exons=2)$/ && f == $1 && ($4 - i) < 3500 {print p > "UBE01_002_"$1; print > "UBE01_002_"$1} {p=$0} {f=$1} {i=$5}'; ##  "CLUSTERS2_"$1}

## extract genes which are separated by > specified intergenetic gap length						
sort -V -t ";" -k 9,9 UBE01_001_${2}* | awk -F ";" '/(exons=1|exons=2)$/ && p ~ /(exons=1|exons=2)$/ && f == $1 && ($4 - i) > 3500 {print p > "UBE01_003_"$1; print > "UBE01_003_"$1} {p=$0} {f=$1} {i=$5}'; ## "UNIQ1_"$1

## extracts and sortsgenes at start and end of clusters (as they were not duplicated by the previous 2 steps)				
sort -V -t ";" -k 9,9 UBE01_002_${2}* | uniq -u | awk -F ";" '{print >> "UBE01_003_"$1}';		
sort -V -t ";" -k 9,9 UBE01_003_${2}* | uniq | awk -F ";" '{print > "UBE01_004_"$1}'; ## {print > "UNIQ2_"$1}';

## add START to cluster boundary genes and replace every 2nd START with END
sed -i 's/$/\;START/' UBE01_004_${2}*;					
sed -i 'n;s/START/END/' UBE01_004_${2}*;
## add all the genes between the cluster boundary genes (as they were duplicated previously) and sort final results by contig.gene
sort -V -t ";" -k 9,9 UBE01_002_${2}* | uniq -d | awk -F ";" '{print >> "UBE01_004_"$1}';
sort -V -u -t ";" -k 9 UBE01_004_${2}* | awk -F ";" '{print > "UBE01_FINAL_"$1}';

####### _FINAL is all U/B genes in order by contig.gene with START and END marking the boundaries between the U/B cluster and a non-U/B genes or an intergeneric region of >3500 bases
