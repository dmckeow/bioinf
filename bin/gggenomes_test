#!/bin/bash

conda activate bioinftools

#### input variables
#InFna="/panfs/jay/groups/27/dcschroe/dmckeow/gggenomes/data-raw/emales/emales.fna" ## input fasta nucleotide
InFna="/home/dcschroe/dmckeow/data/house_ref_genomes/multiple_DWV.fna" ## input fasta nucleotide
DmndDb="/panfs/jay/groups/27/dcschroe/shared/bioinfdb/DMND/vog.dmnd" ## database for diamond

OutName=$(basename ${InFna%.*}) ## auto set output names based on input fasta basename

##BlastSubject1="/panfs/jay/groups/27/dcschroe/dmckeow/gggenomes/data-raw/emales/mavirus.faa"
rm -fr tmp_${OutName}; mkdir tmp_${OutName}

# Annotate genes - output needed is a gff file
prodigal -n -t ${OutName}.train -i $InFna
prodigal -t ${OutName}.train -i $InFna -o ${OutName}.gff -f gff -a ${OutName}.faa
sed -i -e '/>/ s/;.*//g' -e 's/.* ID=/>/g' ${OutName}.faa

# six frame translation
esl-translate $InFna > ${OutName}-tran.faa
sed -i 's/|/,/g' ${OutName}-tran.faa
sed -i 's/ /|/g' ${OutName}-tran.faa

# split into one genome per file
rm -fr ${OutName}.split
seqkit split -O ${OutName}.split -i $InFna  

# self-align opposite strands    

for f in ${OutName}.split/*; do
  minimap2 -c -B5 -O6 -E3 --rev-only $f $f > tmp_${OutName}/$(basename ${f%.*}).paf
done

cat tmp_${OutName}/*.paf > ${OutName}-tirs.paf


# All-vs-all alignment for synteny regions
minimap2 -X -N 50 -p 0.1 -c $InFna $InFna > ${OutName}.paf


######## get GC content
samtools faidx $InFna
cp ${InFna}.fai ${OutName}.fai

seqkit faidx $InFna
cp ${InFna}.fai ${OutName}.seqkit.fai

cut -f 1,2 ${InFna}.fai > tmp_${OutName}/${OutName}.fai
WINDOW=50
while IFS=$'\t' read -r sequence length; do
    for ((start=1; start<=length; start+=WINDOW)); do
        end=$((start+WINDOW-1))
        if [ "$end" -gt "$length" ]; then
            end="$length"
        fi
        echo -e "$sequence\t$start\t$end"
    done
done < tmp_${OutName}/${OutName}.fai > tmp_${OutName}/${OutName}.bed


bedtools nuc -fi $InFna -bed tmp_${OutName}/${OutName}.bed | cut -f 1-3,5 | sed 's/\t/\tGC.w50\t/3' | sed '1,1d' > ${OutName}-gc.tsv

mmseqs easy-cluster ${OutName}.faa ${OutName}-mmseqs ./tmp_${OutName} -e 1e-5 -c 0.7
mmseqs easy-cluster ${OutName}-tran.faa ${OutName}-mmseqs-tran ./tmp_${OutName}-tran -e 1e-5 -c 0.7

### give seqs ortholog group names based on mmseqs preds
awk -F "\t" '{if($1 == $2) print $1}' ${OutName}-mmseqs_cluster.tsv > tmp_${OutName}/${OutName}-cogs.tsv
counter=1
while read -r line; do
	group=$(printf '%03d' $counter)
    echo "/^$line\\t/ s/$/\tcog$group/g"
    ((counter++))
done < tmp_${OutName}/${OutName}-cogs.tsv | sed -f - ${OutName}-mmseqs_cluster.tsv > ${OutName}-cogs.tsv
cut -f 3 ${OutName}-cogs.tsv | sort -V | uniq -c | sed -E 's/^ +(.+) (.+)/\/\\t\2\$\/ s\/$\/\\t\1\/g/g' | sed -f - ${OutName}-cogs.tsv | cut -f 2-4 > tmp_${OutName}/${OutName}-cogs.tsv && mv tmp_${OutName}/${OutName}-cogs.tsv ${OutName}-cogs.tsv

### give seqs ortholog group names based on mmseqs translations
awk -F "\t" '{if($1 == $2) print $1}' ${OutName}-mmseqs-tran_cluster.tsv > tmp_${OutName}/${OutName}-tran-cogs.tsv
counter=1
while read -r line; do
  group=$(printf '%03d' $counter)
    echo "/^$line\\t/ s/$/\tcog$group/g"
    ((counter++))
done < tmp_${OutName}/${OutName}-tran-cogs.tsv | sed -f - ${OutName}-mmseqs-tran_cluster.tsv > ${OutName}-tran-cogs.tsv
cut -f 3 ${OutName}-tran-cogs.tsv | sort -V | uniq -c | sed -E 's/^ +(.+) (.+)/\/\\t\2\$\/ s\/$\/\\t\1\/g/g' | sed -f - ${OutName}-tran-cogs.tsv | cut -f 2-4 > tmp_${OutName}/${OutName}-tran-cogs.tsv && mv tmp_${OutName}/${OutName}-tran-cogs.tsv ${OutName}-tran-cogs.tsv


############# blast against database of interest
# mavirus.faa - published
##blastp -query ${OutName}.faa -subject $BlastSubject1 -outfmt 7 > ${OutName}_mavirus-blastp.tsv
##perl -ne 'if(/>(\S+) gene=(\S+) product=(.+)/){print join("\t", $1, $2, $3), "\n"}' \${BlastSubject1} > $(basename $BlastSubject1).tsv

########## interproscan
### amino acid, predictions
Q="sbatch --time=48:00:00 --cpus-per-task=12 --mem=48GB --partition ag2tb -o slurm.%N.%j.out -e slurm.%N.%j.err --wrap='module load interproscan;"
R="'"
echo "$Q sed 's/\*/X/g' ${OutName}.faa | interproscan.sh -t p -f TSV -i - -o ${OutName}.iprscan$R" > run_iprscan

### amino acid, frame translations
Q="sbatch --time=48:00:00 --cpus-per-task=12 --mem=48GB --partition ag2tb -o slurm.%N.%j.out -e slurm.%N.%j.err --wrap='module load interproscan;"
R="'"
echo "$Q sed 's/\*/X/g' ${OutName}-tran.faa | interproscan.sh -t p -f TSV -i - -o ${OutName}-tran.iprscan$R" >> run_iprscan

########## diamond
### amino acid, predictions
Q="sbatch --time=24:00:00 --cpus-per-task=12 --mem=48GB --partition ag2tb -o slurm.%N.%j.out -e slurm.%N.%j.err --wrap='eval \"\$(conda shell.bash hook)\"; conda activate bioinftools;"
R="'"
echo "$Q diamond blastp --evalue 1e-20 --sensitive -d $DmndDb -q ${OutName}.faa -f 6 -o ${OutName}.dmnd.blastp$R" > run_diamond

### amino acid, frame translations
Q="sbatch --time=24:00:00 --cpus-per-task=12 --mem=48GB --partition ag2tb -o slurm.%N.%j.out -e slurm.%N.%j.err --wrap='eval \"\$(conda shell.bash hook)\"; conda activate bioinftools;"
R="'"
echo "$Q diamond blastp --evalue 1e-20 --sensitive -d $DmndDb -q ${OutName}-tran.faa -f 6 -o ${OutName}-tran.dmnd.blastp$R" >> run_diamond

######### submit search jobs
bash run_iprscan
bash run_diamond


############ ONCE the search jobs are done:

### turn interproscan into mock blast table
for f in ${OutName}*.iprscan; do
  sed -E 's/:+/:/g' $f | awk -F "\t" 'BEGIN{OFS="\t"}; {print $1,$4"::"$5"::"$6,"0",$3,"0","0",$7,$8,"0","0",$9,"0"}' > ${f}.pseudoblast
done

### filter blast results to remove redundant hits
for f in ${OutName}*.dmnd.blast*; do
  awk -F "\t" '!a[$1,$7,$8]++' $f > tmp_${OutName}/${OutName}.dmnd.blast && mv tmp_${OutName}/${OutName}.dmnd.blast $f ## get rid of hist to same coords, keeping best hit

  awk -F "\t" 'BEGIN{OFS="\t"};{ gsub(/\..+/, "", $2) } 1' $f > tmp_${OutName}/${OutName}.dmnd.blast && mv tmp_${OutName}/${OutName}.dmnd.blast $f ## VOG specific
done

################################################################################################
################################################################################################
################################################################################################
################################################################################################
#!/usr/bin/env Rscript

library(tidyverse)
library(gggenomes)
#setwd("C:/Users/Dean Mckeown/Downloads")

setwd("C:/Users/Dean Mckeown/Downloads/emales_test2")

# parse sequence length and some metadata from fasta file
# note: ex() is just a helper to get stable paths to gggenomes example data
###emales_seqs <- read_seqs(ex("emales/emales.fna")) ## does NOT work on windows

emales_seqs <- read_fai("emales.seqkit.fai") %>%
extract(seq_desc, into = c("emale_type", "is_typespecies"), "=(\\S+) \\S+=(\\S+)", remove=F, convert=T) %>%
arrange(emale_type, length)

emales_seqs <- emales_seqs[1:6,] ## filter to 6 genomes for speed

######## get gene info from gff
emale_genes <- read_gff3("emales.gff") %>%
  mutate(gc_cont=as.numeric(gc_cont))             # per gene GC-content

##emale_genes %<>% mutate(seq_id_start_end = paste0(seq_id, ":", start-1, "-", end)) ## minus one because the cog file has prodigal coords that start at 1, not 0


# prefilter hits by minimum length and maximum divergence
emale_tirs_paf <- read_paf("emales-tirs.paf") %>%
  filter(seq_id == seq_id2 & map_length > 99 & de < 0.1)

emale_tirs <- bind_rows(
  select(emale_tirs_paf, seq_id=seq_id2, start=start2, end=end2, de))
  ##select(emale_tirs_paf, seq_id=seq_id1, start=start1, end=end1, de)) ## something is wrong with filtering TIRs this way - no start1

emale_links <- read_paf("emales.paf") ## worked as intended

emale_gc <- read_bed("emales-gc.tsv")

emale_cogs <- read_tsv("emales-cogs.tsv", col_names = c("feat_id", "cluster_id", "cluster_n"))

emale_cogs %<>% mutate(
  cluster_label = paste0(cluster_id, " (", cluster_n, ")"),
  cluster_label = fct_lump_min(cluster_label, 5, other_level = "rare"),
  cluster_label = fct_lump_min(cluster_label, 15, other_level = "medium"),
  cluster_label = fct_relevel(cluster_label, "rare", after=Inf))


###########################################################
### alternate blast imports

######## from diamond blastx
emale_blastx <- read_feats("emales.dmnd.blastx", format="blast")

############## swap coordinates if reverse
swap_indices <- emale_blastx$start > emale_blastx$end
# Use temporary variable for swapping
temp <- emale_blastx$start[swap_indices]
emale_blastx$start[swap_indices] <- emale_blastx$end[swap_indices]
emale_blastx$end[swap_indices] <- temp
emale_blastx$strand <- ifelse(swap_indices, "-", "+") ## add strand if the coords were swapped (-) or not (+)

emale_blastx %<>% 
  dplyr::rename(blast_desc = seq_id2) %>%
  select(seq_id, start, end, blast_desc) %>%
  distinct()


##emale_blast <- emale_genes %>%
  ##select(seq_id_start_end, feat_id) %>%
  ##merge(emale_blast, by.x="seq_id_start_end", by.y="feat_id", all.y=TRUE) %>%
  ##select(-seq_id_start_end) %>%
  ##as_tibble()
  

####################### searches based on the features - i.e. blast of proteins of predicted genes
emale_blast <- read_subfeats("emales_mavirus-blastp.tsv", format="blast")
emale_blast %<>%
  filter(evalue < 1e-3) %>%
  select(feat_id, start, end, feat_id2) %>%
  left_join(read_tsv("mavirus.faa.tsv", col_names = c("feat_id2", "blast_hit", "blast_desc")))

########### from interproscan of protein
emale_blast <- read_subfeats("emales.iprscan.pseudoblastp", format="blast")
emale_blast %<>%
  select(feat_id, start, end, feat_id2) %>%
  rename(blast_desc = feat_id2) %>%
  filter(grepl('Pfam::', blast_desc))


###########################################################
###########################################################


####### repair the names to match gff, if gene name format is contig:start-end
##emale_blast <- emale_genes %>%
  ##select(seq_id_start_end, feat_id) %>%
  ##merge(emale_blast, by.x="seq_id_start_end", by.y="feat_id", all.y=TRUE) %>%
  ##select(-seq_id_start_end) %>%
  ##as_tibble()

gggenomes(
  genes = emale_genes, seqs = emales_seqs, links=emale_links,
  feats = list(emale_tirs, gc=emale_gc, emale_blastx)) %>%
  add_clusters(emale_cogs) %>%
  add_subfeats(emale_blast) %>%
  sync() +
  geom_feat(position="identity", linewidth=6) +
  geom_seq() +
  geom_link(offset = c(0.3, 0.2), color="white", alpha=.3) +
  geom_bin_label() +
  geom_feat(aes(color="terminal inverted repeat"), data=feats(emale_tirs), linewidth=5, position="pile") +
  geom_feat(aes(color=blast_desc), data=feats(emale_blastx), linewidth=5, position="identity") +
  geom_feat(aes(color=blast_desc), data=feats(emale_blast), linewidth=5, position="pile") +
  geom_gene(aes(fill=cluster_label)) +
  geom_wiggle(aes(z=score, linetype="GC-content"), feats(gc), fill="lavenderblush4", position=position_nudge(y=-.2), height = .2) +
  scale_fill_brewer("Genes", palette="Set3", na.value="cornsilk3") +
  scale_color_brewer("Blast hits & Features", palette="Paired", na.value="cornsilk3") +
  scale_linetype("Graphs") +
  ggtitle(expression(paste("Endogenous mavirus-like elements of ", italic("C. burkhardae"))))


  ##geom_feat_note(aes(label=blast_desc), data=feats(emale_blast), nudge_y=.1, vjust=0)

